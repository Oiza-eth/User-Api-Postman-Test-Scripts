{
	"info": {
		"_postman_id": "377c2d49-98f2-4e3b-ab6b-6a56ee2bd4e0",
		"name": "User Endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8738160",
		"_collection_link": "https://northsnowco.postman.co/workspace/Enyanta-User-API~2bc2caaf-f368-4cb0-b78e-ed05d647f23b/collection/8738160-377c2d49-98f2-4e3b-ab6b-6a56ee2bd4e0?action=share&source=collection_link&creator=8738160"
	},
	"item": [
		{
			"name": "User Creation Tests",
			"item": [
				{
					"name": "create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has confirmation with correct user id\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);\r",
									"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"5\"); // checks message matches id as string\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 5,\r\n  \"username\": \"sugargirl\",\r\n  \"firstName\": \"Fuje\",\r\n  \"lastName\": \"James\",\r\n  \"email\": \"jamefuje@gmail.com\",\r\n  \"password\": \"123456\",\r\n  \"phone\": \"08103005115\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);\r",
									"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\", String(pm.collectionVariables.get(\"testUserId\")));// checks message matches id as string\r",
									"    pm.expect(jsonData.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is acceptable\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is correct\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Post-response Script - Track created user\r",
									"if (pm.response.code === 200) {\r",
									"    const createdUsers = JSON.parse(pm.environment.get(\"createdUsers\") || \"[]\");\r",
									"    createdUsers.push(pm.collectionVariables.get(\"testUsername\"));\r",
									"    pm.environment.set(\"createdUsers\", JSON.stringify(createdUsers));\r",
									"    pm.collectionVariables.set(\"existingTestUsername\", pm.collectionVariables.get(\"testUsername\"));\r",
									"    pm.collectionVariables.set(\"existingTestUsername2\", pm.collectionVariables.get(\"testUsername\"));\r",
									"    pm.collectionVariables.set(\"existingTestUsername3\", pm.collectionVariables.get(\"testUsername\"));\r",
									"    console.log(\"User created and tracked:\", pm.collectionVariables.get(\"testUsername\"));\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const testUser = {\r",
									"    id: pm.collectionVariables.get(\"testUserId\"),\r",
									"    username: pm.collectionVariables.get(\"testUsername\"),\r",
									"    email: pm.collectionVariables.get(\"testUsername\") + \"@test.com\"\r",
									"};\r",
									"\r",
									"console.log(\"Creating user:\", testUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{testUserId}},\r\n  \"username\": \"{{testUsername}}\",\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"User\",\r\n  \"email\": \"{{testUsername}}@test.com\",\r\n  \"password\": \"Test123!\",\r\n  \"phone\": \"08012345678\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Missing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests\r",
									"pm.test(\"Should reject user without username\", function () {\r",
									"    pm.expect([400, 422, 500]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should indicate missing username\", function () {\r",
									"    if (pm.response.code !== 200) {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(JSON.stringify(jsonData).toLowerCase()).to.include(\"username\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Should not create user in database\", function () {\r",
									"    // This test passes if we get error status\r",
									"    pm.expect(pm.response.code).to.not.equal(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const testUser = {\r",
									"    id: pm.collectionVariables.get(\"testUserId\"),\r",
									"    username: pm.collectionVariables.get(\"testUsername\"),\r",
									"    email: pm.collectionVariables.get(\"testUsername\") + \"@test.com\"\r",
									"};\r",
									"\r",
									"console.log(\"Creating user:\", testUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{testUserId}},\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"User\",\r\n  \"email\": \"test@example.com\",\r\n  \"password\": \"Test123!\",\r\n  \"phone\": \"08012345678\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Missing User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Tests\r",
									"pm.test(\"Should reject user without user id\", function () {\r",
									"    pm.expect([400, 422, 500]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"Response should indicate missing uset id\", function () {\r",
									"    if (pm.response.code !== 200) {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(JSON.stringify(jsonData).toLowerCase()).to.include(\"username\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Should not create user in database\", function () {\r",
									"    // This test passes if we get error status\r",
									"    pm.expect(pm.response.code).to.not.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);\r",
									"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"0\r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \r",
									"    \");// checks message matches id as string\r",
									"    pm.expect(jsonData.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const testUser = {\r",
									"    id: pm.collectionVariables.get(\"testUserId\"),\r",
									"    username: pm.collectionVariables.get(\"testUsername\"),\r",
									"    email: pm.collectionVariables.get(\"testUsername\") + \"@test.com\"\r",
									"};\r",
									"\r",
									"console.log(\"Creating user:\", testUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"User\",\r\n  \"email\": \"test@example.com\",\r\n  \"password\": \"Test123!\",\r\n  \"phone\": \"08012345678\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should handle invalid email format gracefully\", function () {\r",
									"    // API might accept it (200) or reject it (400/422)\r",
									"    pm.expect([200, 400, 422]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure is maintained\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const testUser = {\r",
									"    id: pm.collectionVariables.get(\"testUserId\"),\r",
									"    username: pm.collectionVariables.get(\"testUsername\"),\r",
									"    email: pm.collectionVariables.get(\"testUsername\") + \"@test.com\"\r",
									"};\r",
									"\r",
									"console.log(\"Creating user:\", testUser);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{testUserId}},\r\n  \"username\": \"{{testUsername}}_invalid\",\r\n  \"firstName\": \"Test\",\r\n  \"lastName\": \"User\",\r\n  \"email\": \"invalid-email-format\",\r\n  \"password\": \"Test123!\",\r\n  \"phone\": \"08012345678\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - Duplicate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should handle duplicate username\", function () {\r",
									"    // API might accept it (200) or reject it (409)\r",
									"    pm.expect([200, 409]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"pm.test(\"Response provides meaningful message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.exist;\r",
									"    \r",
									"    if (pm.response.code === 409) {\r",
									"        pm.expect(jsonData.message.toLowerCase()).to.include(\"duplicate\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const existingUsername = pm.collectionVariables.get(\"testUsername\");\r",
									"console.log(\"Attempting to create duplicate user:\", existingUsername);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{testUserId}},\r\n  \"username\": \"{{testUsername}}\",\r\n  \"firstName\": \"Duplicate\",\r\n  \"lastName\": \"User\",\r\n  \"email\": \"duplicate@test.com\",\r\n  \"password\": \"Test123!\",\r\n  \"phone\": \"08012345679\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bulk Creation Test",
			"item": [
				{
					"name": "Create User with List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has confirmation message 'ok'\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);\r",
									"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"ok\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"id\": 1,\r\n        \"username\": \"Oiza\",\r\n        \"firstName\": \"Oizamisi\",\r\n        \"lastName\": \"Akande\",\r\n        \"email\": \"oizamisiakande@gmail.com\",\r\n        \"password\": \"Voke111@\",\r\n        \"phone\": \"07046589607\",\r\n        \"userStatus\": 1\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"username\": \"Favybabe\",\r\n        \"firstName\": \"Favour\",\r\n        \"lastName\": \"Madogwe\",\r\n        \"email\": \"Favourite@gmail.com\",\r\n        \"password\": \"246812\",\r\n        \"phone\": \"09063420271\",\r\n        \"userStatus\": 1\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/createWithList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with List Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bulk creation successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response indicates success\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.eql(200);\r",
									"    pm.expect(jsonData.message).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"pm.test(\"Processing time reasonable for bulk operation\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"// Post-response Script - Track bulk created users\r",
									"if (pm.response.code == 200) {\r",
									"    console.log(\"I am here\")\r",
									"    const createdUsers = JSON.parse(pm.environment.get(\"createdUsers\") || \"[]\");\r",
									"    const username2 = \"bulkuser1_\" + pm.collectionVariables.get(\"testRunId\");\r",
									"    const username3 = \"bulkuser2_\" + pm.collectionVariables.get(\"testRunId\");\r",
									"    createdUsers.push(username2);\r",
									"    createdUsers.push(username3);\r",
									"    pm.environment.set(\"createdUsers\", JSON.stringify(createdUsers));\r",
									"    pm.collectionVariables.set(\"existingTestUsername2\", username2);\r",
									"    pm.collectionVariables.set(\"existingTestUsername3\", username3);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 1001,\r\n    \"username\": \"bulkuser1_{{testRunId}}\",\r\n    \"firstName\": \"Bulk\",\r\n    \"lastName\": \"User1\",\r\n    \"email\": \"bulkuser1_{{testRunId}}@test.com\",\r\n    \"password\": \"Test123!\",\r\n    \"phone\": \"08011111111\",\r\n    \"userStatus\": 1\r\n  },\r\n  {\r\n    \"id\": 1002,\r\n    \"username\": \"bulkuser2_{{testRunId}}\",\r\n    \"firstName\": \"Bulk\",\r\n    \"lastName\": \"User2\",\r\n    \"email\": \"bulkuser2_{{testRunId}}@test.com\",\r\n    \"password\": \"Test123!\",\r\n    \"phone\": \"08011111112\",\r\n    \"userStatus\": 1\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/createWithList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - With empty Array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should handle empty array gracefully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response structure maintained for empty array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/createWithList",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User with array",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has confirmation message 'ok'\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);\r",
									"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\", \"ok\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 3,\r\n    \"username\": \"Oreski\",\r\n    \"firstName\": \"Oremei\",\r\n    \"lastName\": \"Akande\",\r\n    \"email\": \"oremei.akande@gmail.com\",\r\n    \"password\": \"paris202\",\r\n    \"phone\": \"08037644818\",\r\n    \"userStatus\": 1\r\n  },\r\n  {\r\n    \"id\": 4,\r\n    \"username\": \"Starboy\",\r\n    \"firstName\": \"Paris\",\r\n    \"lastName\": \"Madogwe\",\r\n    \"email\": \"madogweparis@gmail.com\",\r\n    \"password\": \"Voke222#\",\r\n    \"phone\": \"08068562111\",\r\n    \"userStatus\": 1\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/createWithArray",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Retrieval",
			"item": [
				{
					"name": "User by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct user data\", () => {\r",
									"    let user = pm.response.json();\r",
									"\r",
									"    pm.expect(user).to.have.property(\"id\", 5);\r",
									"    pm.expect(user).to.have.property(\"username\", \"sugargirl\");\r",
									"    pm.expect(user).to.have.property(\"firstName\", \"Fuje\");\r",
									"    pm.expect(user).to.have.property(\"lastName\", \"James\");\r",
									"    pm.expect(user).to.have.property(\"email\", \"jamefuje@gmail.com\");\r",
									"    pm.expect(user).to.have.property(\"password\", \"123456\");\r",
									"    pm.expect(user).to.have.property(\"phone\", \"08103005115\");\r",
									"    pm.expect(user).to.have.property(\"userStatus\", 1);\r",
									"});\r",
									"\r",
									"pm.test(\"Check types of the user properties\", () => {\r",
									"    let user = pm.response.json();\r",
									"\r",
									"    pm.expect(user.id).to.be.a(\"number\");\r",
									"    pm.expect(user.username).to.be.a(\"string\");\r",
									"    pm.expect(user.firstName).to.be.a(\"string\");\r",
									"    pm.expect(user.lastName).to.be.a(\"string\");\r",
									"    pm.expect(user.email).to.be.a(\"string\");\r",
									"    pm.expect(user.password).to.be.a(\"string\");\r",
									"    pm.expect(user.phone).to.be.a(\"string\");\r",
									"    pm.expect(user.userStatus).to.be.a(\"number\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/user/sugargirl",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"sugargirl"
							]
						}
					},
					"response": []
				},
				{
					"name": "User by username Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should retrieve existing user\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user data\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData).to.have.property('firstName');\r",
									"    pm.expect(jsonData).to.have.property('lastName');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Username matches requested user\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql(pm.collectionVariables.get(\"existingTestUsername\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Password should not be exposed\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    // Password should be undefined, null, or masked\r",
									"    pm.expect(jsonData.password === undefined || \r",
									"              jsonData.password === null || \r",
									"              jsonData.password === \"***\").to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Email format is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
									"    pm.expect(emailRegex.test(jsonData.email)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const testUsername = pm.collectionVariables.get(\"testUsername\");\r",
									"console.log(\"Retrieving user:\", testUsername);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/user/{{existingTestUsername}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"{{existingTestUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get non existent user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 404 for non-existent user\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Error response structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData.code).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time acceptable even for non-existent user\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const testUsername = pm.collectionVariables.get(\"testUsername\");\r",
									"console.log(\"Retrieving user:\", testUsername);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/user/000000",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update User",
			"item": [
				{
					"name": "updated User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response confirms update with correct user id\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);\r",
									"    pm.expect(jsonData.type).to.exist;\r",
									"    pm.expect(jsonData.message).to.exist;\r",
									"});\r",
									"pm.collectionVariables.set(\"userUpdated\", \"true\");\r",
									"pm.collectionVariables.set(\"updatedFirstName\", \"Updated\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const testUsername = pm.collectionVariables.get(\"testUsername\");\r",
									"console.log(\"Updating user:\", testUsername);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{testUserId}},\r\n  \"username\": \"{{existingTestUsername}}\",\r\n  \"firstName\": \"Updated\",\r\n  \"lastName\": \"Name\",\r\n  \"email\": \"{{existingTestUsername}}_updated@test.com\",\r\n  \"password\": \"UpdatedPass123!\",\r\n  \"phone\": \"08087654321\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/{{existingTestUsername}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"{{existingTestUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User data was actually updated\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    \r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.firstName).to.eql(\"Updated\");\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Name\");\r",
									"    pm.expect(jsonData.email).to.include(\"_updated@test.com\");\r",
									"});\r",
									"\r",
									"pm.test(\"Update persistence verified\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get(\"userUpdated\") !== \"true\") {\r",
									"    throw new Error(\"This test requires the update test to run first\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{testUserId}},\r\n  \"username\": \"{{existingTestUsername}}\",\r\n  \"firstName\": \"Updated\",\r\n  \"lastName\": \"Name\",\r\n  \"email\": \"{{existingTestUsername}}_updated@test.com\",\r\n  \"password\": \"UpdatedPass123!\",\r\n  \"phone\": \"08087654321\",\r\n  \"userStatus\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/user/{{existingTestUsername}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"{{existingTestUsername}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete User",
			"item": [
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Delete user successful message\", () => {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\", 200);\r",
									"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\", pm.collectionVariables.get(\"existingTestUsername\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/user/{{existingTestUsername}}",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"{{existingTestUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non Existent User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete Non Existent User Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/user/000000",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"user",
								"000000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has login confirmation message\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"code\", 200);\r",
							"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");\r",
							"    pm.expect(jsonData.message).to.match(/^logged in user session:/);\r",
							"\r",
							"    // Extract session ID from message and save it to environment variable\r",
							"    let sessionId = jsonData.message.split(\"logged in user session:\")[1];\r",
							"    pm.environment.set(\"sessionId\", sessionId);\r",
							"    console.log(\"Captured sessionId:\", sessionId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/user/login?username=sugargirl&password=123456",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"user",
						"login"
					],
					"query": [
						{
							"key": "username",
							"value": "sugargirl"
						},
						{
							"key": "password",
							"value": "123456"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Log out",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Logout successful message\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"code\", 200);\r",
							"    pm.expect(jsonData).to.have.property(\"type\", \"unknown\");\r",
							"    pm.expect(jsonData).to.have.property(\"message\", \"ok\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/user/logout",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.collectionVariables.set(\"testRunId\", Date.now().toString());\r",
					"pm.collectionVariables.set(\"testUsername\", \"testuser_\" + pm.collectionVariables.get(\"testRunId\"));\r",
					"pm.collectionVariables.set(\"testUserId\", parseInt(pm.collectionVariables.get(\"testRunId\")) % 10000);\r",
					"\r",
					"console.log(\"Test Run ID:\", pm.collectionVariables.get(\"testRunId\"));\r",
					"console.log(\"Test Username:\", pm.collectionVariables.get(\"testUsername\"));\r",
					"\r",
					"// Tests\r",
					"pm.test(\"Environment setup complete\", function() {\r",
					"    pm.expect(pm.collectionVariables.get(\"testRunId\")).to.not.be.undefined;\r",
					"    pm.expect(pm.collectionVariables.get(\"testUsername\")).to.not.be.undefined;\r",
					"});\r",
					"\r",
					"const createdUsers = JSON.parse(pm.environment.get(\"createdUsers\") || \"[]\");\r",
					"\r",
					"pm.test(\"Cleanup initiated\", function() {\r",
					"    console.log(\"Users to cleanup:\", createdUsers);\r",
					"    pm.expect(true).to.be.true; // Always pass, just for logging\r",
					"});\r",
					"\r",
					"// // Post-response Script\r",
					"// // Clear collection variables\r",
					"// pm.collectionVariables.clear();\r",
					"// pm.environment.set(\"createdUsers\", \"[]\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		},
		{
			"key": "testUserId",
			"value": "",
			"type": "string"
		},
		{
			"key": "testUsername",
			"value": "",
			"type": "string"
		},
		{
			"key": "sessionToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "testRunId",
			"value": "",
			"type": "string"
		},
		{
			"key": "existingTestUsername",
			"value": "",
			"type": "string"
		},
		{
			"key": "createdUsers",
			"value": "",
			"type": "string"
		},
		{
			"key": "existingTestUsername2",
			"value": "",
			"type": "string"
		},
		{
			"key": "existingTestUsername3",
			"value": "",
			"type": "string"
		},
		{
			"key": "userUpdated",
			"value": "false",
			"type": "string"
		},
		{
			"key": "updatedFirstName",
			"value": ""
		}
	]
}